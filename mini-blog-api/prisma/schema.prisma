// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String
  emailVerified  DateTime?
  image_url      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Non-Next Auth
  bio            String?
  articles       Article[]
  likes          Like[]
  comments       Comment[]
}

model Article {
  id          String    @id @default(cuid())
  title       String
  content     String
  categoryId  Int
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  likes       Like[]
  comments    Comment[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])

  @@unique([id])
  @@index([userId])
  @@index([categoryId])
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    String
  articleId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([articleId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  userId    String
  articleId String
  parentId  Int?
  children  Comment[] @relation("ParentChild")
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([parentId])
  @@index([articleId])
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  article Article[]
}
